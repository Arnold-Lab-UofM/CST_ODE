%% Fig5_LHS_Clinical_Calibration.m
%
% FILE TO RUN CALIBRATION OF CLINICAL TIMECOURSE DATA TO LHS DATASETS
%
% REQUIRED WORKSPACES:
% 1) HMP-UAB-RelAbundance-Trajectories.mat
%       * Rel_Taxa: Relative abundance of L. iners, oLB, and BV for each
%           patient over all time points
%       * sp: Index of the starting time point for each patient
%       * ep: Index of the final time point for each patient
% 2) HMP-UAB-MetaData.mat
%       * PID_list: List of patient ID names
%       * class_labels: Top two species present across trajectory
%       * bv_pos_pid: index of BV+ patients (Nugent > 7)
%       * met_used_pid: index of MET treated patients
% 3) Model_LHS_5000.mat
%       * LHSmat: Matrix LHS parameter sets generated by preset ranges
%       * StbleSS: Cell array of predicted steady-states and their absolute
%           abundances using linear stability analysis
%
% REQUIRED FUNCTIONS:
% get_SS_info_3sp.m
% get_rep_paramset.m (at end of file)
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% Christina Y. Lee
% University of Michigan
% Mar 12, 2022
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


%% 1. INPUT WORKSPACES AND INFO

% RAW CLINICAL DATA AND METADATA
fdr_loc = '../workspaces/';
load(strcat(fdr_loc,'HMP-UAB-RelAbundance-Trajectories.mat'),'Rel_Taxa',...
    'sp','ep')
run_mat = [Rel_Taxa(:,3), Rel_Taxa(:,1), Rel_Taxa(:,2)]; % re-orders how the model expects the species to be in
load(strcat(fdr_loc,'HMP-UAB-MetaData.mat'), 'PID_list', 'class_labels', ...
    'bv_pos_pid','met_used_pid')
sel_class_lbs = string(class_labels);
sel_BV_idx = bv_pos_pid;
sel_mnz_idx = met_used_pid;

% LHS WORKSPACE TO COMPARE
wsnmG = strcat(fdr_loc,'Model_LHS_5000_w_variables.mat');

%% 2. RUN CALIBRATION
SS_class = []; % Saves the SS configuration type
for i = 1:length(sp)
    tmp = run_mat(sp(i):ep(i),:); % pulls "i"th patient trajectory
    input_trace = tmp;
    nanv = isnan(tmp(:,1));
    if size(tmp,1) -  sum(nanv) < 20 % checks if there is less than 20 time points
        disp('too few time points')
        id_selG = NaN;
        rep_paramsetG = NaN(1,12);
        fitmetG = NaN;
        RA = NaN(1,3);
        SSlabel = {'TS'};
    else
        input_trace(nanv,:) = [];
        [id_selG, rep_paramsetG, fitmetG,RA,SSlabel] = get_rep_paramset(wsnmG,input_trace);
    end

    all_selG(i) = id_selG;
    all_fitmetG(i) = fitmetG;
    all_RA(i) = {RA};
    best_paramset(i,:) = rep_paramsetG;
    SS_class = [SS_class; string(SSlabel{1})];
end

disp('~~~~~~~~~ STEADY STATE CONFIGS ~~~~~~~~~~')
tabulate(SS_class) % shows breakdown of SS types

%% 3. SAVE OUTPUT
out_nm = strcat(date,'-LHS_best_params.mat');
save(out_nm,'best_paramset','SS_class','all_RA','all_fitmetG',...
    'PID_list','sel_mnz_idx','sel_class_lbs','sel_BV_idx')


%% [id_selG, rep_paramsetG, fitmetG,relabundG,SSlabel] = get_rep_paramset(wsnmG,input_trace)
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% INPUT: 
%   * wsnmG: workspace of LHS parameter sets
%   * input_trace: clinical data of relative abundance trajectory for one patient
%
% OUTPUT:
%   * id_selG: index of the selected parameter set
%   * rep_paramsetG: selected parameter set values
%   * fitmetG: RMSE of the parameter set fit to trajectory
%   * SSlabel: predicted steady state type
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function [id_selG, rep_paramsetG, fitmetG,relabundG,SSlabel] = get_rep_paramset(wsnmG,input_trace)
    load(wsnmG,'LHSmat','StbleSS')
    [~, mat, ~, mat_names,~] = get_SS_info_3sp(StbleSS,false);
    fitmet = NaN(size(StbleSS,1),1);
    for i = 1:size(StbleSS,1) % loop through the no. of stable states
        x = StbleSS{i}{:};
        if size(x,1) > 0 % if one or more predicetd SS
            numSS = size(x,1);
            totSSE = 0;
            for k = 1:numSS
                tmp = StbleSS{i}{1}./sum(StbleSS{i}{1});
                for j = 1:3 % loop through each species index (3 species)
                    tmp_trj = input_trace(:,j);
                    SSE = sum((tmp_trj - tmp(j)).^2);
                    totSSE = totSSE + SSE;
                end
                fitmet(i) = totSSE/numSS; % average across no. SS
            end
        else
           fitmet(i) = 1000000; %  if no SS is stable for LHS set, set error to large number
        end
    end

    fitmetG = min(fitmet); % min RMSE
    id_selG = find(fitmet == min(fitmet));  % index in LHS parameter sets of min RMSE
    rep_paramsetG = LHSmat(id_selG,:); % best parameter set based on RMSE
    relabundG = StbleSS{id_selG}{1}./sum(StbleSS{id_selG}{1}); % Relative abundance of set
    SSlabel = mat_names(mat(id_selG,:)); % steady-state configuration
end
